<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/batch	http://www.springframework.org/schema/batch/spring-batch-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd">

	<import resource="classpath:context-datasource.xml" />

	<!-- JobRepository and JobLauncher are configuration/setup classes -->
	<bean id="jobRepository" class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean" />

	<bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>


	<!-- ItemReader which reads from database and returns the row mapped by  rowMapper -->
	<bean id="databaseItemReader" class="org.springframework.batch.item.database.JdbcCursorItemReader">

		<property name="dataSource" ref="dataSource" />

		<property name="sql" value="SELECT notif_id, attempt_no, cab_id, client_id, app_type, priority, client_notif_ref_id, notif_status_code, dest_id, media_type, from_address, address, dispatch_sid, checkpoints, result_code, duration_seconds, start_time, end_time, cab_processing_time, cab_creation_time, cab_creation_date, cab_creation_month, cab_creation_year, notif_creation_time, attempt_creation_time, flushed_time, owner, carrier, operator, transfer_start_time, transfer_end_time, transfer_duration FROM dw_notif_attempts where client_id = 8024 and app_type = 'RPS' and cab_creation_month = '12-2018'" />

		<property name="rowMapper">
			<!-- <bean class="com.tri.learn.ExamResultRowMapper" /> -->
			<bean class="com.tri.learn.DWNotifAttemptResultMapper" />
		</property>

	</bean>


	<!-- ItemWriter writes a line into output flat file -->
	<bean id="flatFileItemWriter" class="org.springframework.batch.item.file.FlatFileItemWriter" scope="step">

		<property name="resource" value="file:csv/DWResult.txt" />

		<property name="lineAggregator">

			<!-- An Aggregator which converts an object into delimited list of strings -->
			<bean class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">

				<property name="delimiter" value="|" />

				<property name="fieldExtractor">

					<!-- Extractor which returns the value of beans property through reflection -->
					<bean class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
						<!-- <property name="names" value="studentName, percentage, dob" /> -->
						<property name="names" value="notifId, attemptNo, cabId, clientId, appType, clientNotifRefId, notifStatusCode, destId, mediaType, fromAddress"></property>
					</bean>
				</property>
			</bean>
		</property>
	</bean>


	<!-- Optional JobExecutionListener to perform business logic before and 
		after the job -->
	<bean id="jobListener" class="com.tri.learn.ExamResultJobListener" />

	<!-- Optional ItemProcessor to perform business logic/filtering on the input 
		records -->
	<bean id="itemProcessor" class="com.tri.learn.ExamResultItemProcessor" />

	<!-- Step will need a transaction manager -->
	<bean id="transactionManager" class="org.springframework.batch.support.transaction.ResourcelessTransactionManager" />

	<!-- Actual Job -->
	<batch:job id="examResultJob">
		<batch:step id="step1">
			<batch:tasklet transaction-manager="transactionManager">
				<batch:chunk reader="databaseItemReader"
					writer="flatFileItemWriter" processor="itemProcessor"
					commit-interval="10000" />
			</batch:tasklet>
		</batch:step>
		<batch:listeners>
			<batch:listener ref="jobListener" />
		</batch:listeners>
	</batch:job>

</beans>			